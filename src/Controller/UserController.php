<?php

namespace App\Controller;


use App\Entity\Utilisateurs;
use App\Form\RegisterType;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;
use Symfony\Component\Security\Http\Authentication\AuthenticationUtils;


class UserController extends AbstractController
{
    /**
     * @Route("/accueil/home", name="home")
     */
    //Page d'accueil
    public function index()
    { //Elle dois se contenter d'afficher la page d'accueil qui contiendra le formulaire
        return $this->render('accueil/home.html.twig');
    }

    /*Permet de rediriger et d'envoyer le formulaire d'inscription ainsi que d'encode le mdp dans la BDD*/
    /**
     * @Route("/user/register", name="register")
     * @param Request $request
     * @param EntityManagerInterface $em
     * @param UserPasswordEncoderInterface $encoder
     * @return Response
     */
    public function register(Request $request, EntityManagerInterface $em, UserPasswordEncoderInterface $encoder)
    {
        /*   restriction USER */
        $this->denyAccessUnlessGranted("ROLE_ADMIN");
        /*-------------------------*/

        // Générons le formulaire à partir de notre UserType
        $user = new Utilisateurs();
        $registerForm = $this->createForm(RegisterType::class, $user);

        // Traitement du formulaire une fois envoyé
        $registerForm->handleRequest($request);
        if ($registerForm->isSubmitted() && $registerForm->isValid()){

            //encodage du mot de passe
            $hashed = $encoder->encodePassword($user, $user->getPassword());
            $user ->setPassword($hashed);


            $em->persist($user);
            $em->flush();
            return $this->redirectToRoute('dashboard');
        }

        //En cas d'erreur on reste sur le formulaire
        return $this->render("user/register.html.twig", [
            "registerForm"=> $registerForm->createView()
        ]);
    }

    /**
     * @Route("accueil/dashboard", name="dashboard")
     */
    public function dashboard(){
        return $this->render('accueil/dashboard.html.twig');
    }

    /* Fonction pour la connection */
    /**
     * @Route("user/login", name="login")
    */
    public function login(Request $request, AuthenticationUtils $authenticationUtils)
    {
        //Récupères les erreurs de connexion s'il y en a
        $error = $authenticationUtils->getLastAuthenticationError();

        // Récupères l'identifiant rentré par l'utilisateur
        $lastUsername = $authenticationUtils->getLastUsername();

        //Renvoie l'utilisateur sur la page d'acceuil si la connexion est échouée.
        return $this->render('user/login.html.twig', array(
            'last_username' => $lastUsername,
            'error' => $error,
        ));
    }
    /*
     * @Route ("/user/login", name="login")


public function add(EntityManagerInterface $em)
    {

        $utilisateur = new Utilisateurs();
        $utilisateur->setusername("titi");
        $utilisateur->setNom("tutu");
        $utilisateur->setPrenom("toto");
        $utilisateur->setTelephone(145257896);
        $utilisateur->setEmail("titi@sortie.fr");
        $utilisateur->setPassword("titi1");
        $utilisateur->setAdmin(true);
        $utilisateur->setActif(false);

        $em->persist($utilisateur);
        $em->flush();

        return $this -> render("/user/login.html.twig", []);

    }*/


            // Permet dafficher le utillisateur
    /*/**
     * @Route("/user/login", name="login")


    public function list()
    {
        $utilisateursrepo = $this->getDoctrine()->getRepository(Utilisateurs::class);
        $utilisateurs = $utilisateursrepo->findAll();
        dump($utilisateurs);

        return $this->render("user/login.html.twig");
    }*/

    /*/**
     * @Route("/user/profil", name="app_profil")

    public function profil()
    {
        return $this->render('user/profil.html.twig', []);
    }*/

    /*Permet de se deco*/
    /**
     * Symfony gère entièrement cette route
     * @Route ("/logout", name="logout")
    */
    public function logout() {}

}
